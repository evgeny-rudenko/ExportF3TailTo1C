SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.USP_EXPORT_1C_NB') IS NULL BEGIN
    EXEC('CREATE PROCEDURE DBO.USP_EXPORT_1C_NB AS RETURN')
    GRANT EXEC ON [DBO].USP_EXPORT_1C_NB TO [PUBLIC]
END
GO
---------------------------------------------------------------------------------------------------
ALTER PROCEDURE DBO.USP_EXPORT_1C_NB @XMLPARAM NTEXT
AS 

DECLARE @CASH_SESSION_DATE_CLOSE BIT, @GROUP_NDS BIT, @UNLOAD_QUANTITY BIT
DECLARE @HDOC INT, @DATE_FROM DATETIME, @DATE_TO DATETIME
DECLARE @PDATEBL DATETIME, @PDATEEL DATETIME
DECLARE @ALL_STORE BIT, @ALL_DOC BIT, @ALL_CONTRACTOR BIT
DECLARE @GROUP_SUPPLIER BIT
DECLARE @CASH_SESSION_MOVE BIT
DECLARE @PAYMENT_TYPE BIT
DECLARE @LAYOUT_GROUPS BIT
DECLARE @GTD BIT
DECLARE @PAYMENT_TYPE_GROUPS BIT
DECLARE @OFF_BALANCE_GROUPS BIT
DECLARE @CODE_NAME_UNIT_GROUPS BIT
DECLARE @INVOICE_NUMBER_GROUPS BIT
DECLARE @SCALE_RESULT int 
DECLARE @STORE_GROUP BIT 
DECLARE @CHEQUE_GROUP BIT 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
    SELECT TOP 1
        @DATE_FROM = DATE_FROM ,
        @DATE_TO = DATE_TO,
        @CASH_SESSION_DATE_CLOSE = CASH_SESSION_DATE_CLOSE,
        @UNLOAD_QUANTITY = UNLOAD_QUANTITY,
        @GROUP_NDS = GROUP_NDS,
        @GROUP_SUPPLIER = GROUP_SUPPLIER,
        @LAYOUT_GROUPS = LAYOUT_GROUPS,
        @CASH_SESSION_MOVE = CASH_SESSION_MOVE,
        @PAYMENT_TYPE = PAYMENT_TYPE,
        @GTD = GTD,
        @PAYMENT_TYPE_GROUPS = PAYMENT_TYPE_GROUPS,
		@OFF_BALANCE_GROUPS = OFF_BALANCE_GROUPS,
        @CODE_NAME_UNIT_GROUPS = CODE_NAME_UNIT_GROUPS,
        @SCALE_RESULT = SCALE_RESULT,
        @STORE_GROUP = STORE_GROUP,
        @INVOICE_NUMBER_GROUPS = INVOICE_NUMBER_GROUPS,
        @CHEQUE_GROUP = CHEQUE_GROUP

    FROM OPENXML(@HDOC, '/XML') 
	WITH
    (
        DATE_FROM DATETIME 'DATE_FROM',
        DATE_TO DATETIME 'DATE_TO',
        CASH_SESSION_DATE_CLOSE BIT 'EXPORT_CASH_SESSION_DATE_CLOSE',
        UNLOAD_QUANTITY BIT 'UNLOAD_QUANTITY',
        GROUP_NDS BIT 'GROUP_NDS',
    	GROUP_SUPPLIER BIT 'GROUP_SUPPLIER',
        LAYOUT_GROUPS BIT 'LAYOUT_GROUPS',
        CASH_SESSION_MOVE BIT 'CASH_SESSION_MOVE',
        PAYMENT_TYPE BIT 'PAYMENT_TYPE',
        GTD BIT 'GTD',
        PAYMENT_TYPE_GROUPS BIT 'PAYMENT_TYPE_GROUPS',
		OFF_BALANCE_GROUPS BIT 'OFF_BALANCE_GROUPS',
        CODE_NAME_UNIT_GROUPS BIT 'CODE_NAME_UNIT_GROUPS',
        SCALE_RESULT INT 'SCALE_RESULT', 
		STORE_GROUP BIT 'STORE_GROUP',
        INVOICE_NUMBER_GROUPS BIT 'INVOICE_NUMBER_GROUPS',
        CHEQUE_GROUP BIT 'CHEQUE_GROUP' )

    IF IsNULL(@SCALE_RESULT,0) <= 1 set @SCALE_RESULT = 2
    IF IsNULL(@SCALE_RESULT,0) > 4  set @SCALE_RESULT = 4


    SELECT ID_STORE INTO #STORE FROM OPENXML(@HDOC, '/XML/STORE') WITH(
        ID_STORE BIGINT 'ID_STORE') WHERE ID_STORE != 0
    IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0
    
    SELECT ID_TABLE_DATA INTO #TABLE_DATA FROM OPENXML(@HDOC, '/XML/TABLE_DATA') WITH(
        ID_TABLE_DATA BIGINT 'ID_TABLE_DATA') WHERE ID_TABLE_DATA != 0
    IF @@ROWCOUNT = 0 SET @ALL_DOC = 1 ELSE SET @ALL_DOC = 0

    SELECT ID_CONTRACTOR INTO #CONTRACTOR FROM OPENXML(@HDOC, '/XML/CONTRACTOR') WITH(
        ID_CONTRACTOR BIGINT 'ID_CONTRACTOR') WHERE ID_CONTRACTOR != 0
    IF @@ROWCOUNT = 0 SET @ALL_CONTRACTOR = 1 ELSE SET @ALL_CONTRACTOR = 0


EXEC SP_XML_REMOVEDOCUMENT @HDOC
EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
SET @PDATEBL = CONVERT(DATETIME, CONVERT(VARCHAR, @DATE_FROM, 104), 104)
SET @PDATEEL = CONVERT(DATETIME, CONVERT(VARCHAR, @DATE_TO, 104), 104)
SET @CASH_SESSION_DATE_CLOSE = ISNULL(@CASH_SESSION_DATE_CLOSE, 0)
SET @UNLOAD_QUANTITY = ISNULL(@UNLOAD_QUANTITY, 0)
SET @GROUP_NDS = ISNULL(@GROUP_NDS, 0)
SET @GROUP_SUPPLIER = ISNULL(@GROUP_SUPPLIER, 0)


--!!! def = 1, для теста 0
--SET @STORE_GROUP = IsNULL(@STORE_GROUP,1)
--SET @INVOICE_NUMBER_GROUPS = IsNULL(@INVOICE_NUMBER_GROUPS,1)
--!!! def = 0, для теста 1
--SET @CHEQUE_GROUP = IsNULL(@CHEQUE_GROUP,0)


DECLARE @STRUCTURE TABLE(COL_ID INT, TABLE_NAME NVARCHAR(128), COLUMN_NAME NVARCHAR(128), [TYPE_NAME] NVARCHAR(128), [PRECISION] INT, LENGTH INT, SCALE INT)
INSERT @STRUCTURE(
       TABLE_NAME, COL_ID, COLUMN_NAME,     [TYPE_NAME], [PRECISION], [LENGTH], SCALE)
SELECT 'TO',       01,     'PDATEBL',       'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       02,     'PDATEEL',       'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       03,     'OPER_CODE',     'varchar',   032,         032,      00 UNION ALL
SELECT 'TO',       04,     'DOC_ID',        'varchar',   050,         050,      00 UNION ALL
SELECT 'TO',       05,     'DOC_NUM',       'varchar',   050,         050,      00 UNION ALL
SELECT 'TO',       06,     'DOC_DATE',      'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       07,     'DOC_INNUM',     'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       08,     'DOC_IN_DAT',    'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       09,     'STORE_ID',      'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       10,     'STORE_NM',      'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       11,     'STORE_TO_I',    'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       12,     'STORE_TO_N',    'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       13,     'CONTRGR_ID',    'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       14,     'CONTRGR_NM',    'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       15,     'CONTR_ID',      'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       16,     'CONTR_NM',      'varchar',   200,         200,      00 UNION ALL
SELECT 'TO',       17,     'CONTR_INN',     'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       18,     'NUM_KASSA',     'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       19,     'OPERT',         'int',       001,         001,      00 UNION ALL
SELECT 'TO',       20,     'NDS_RATE',      'money',     006,         006,      @SCALE_RESULT UNION ALL
SELECT 'TO',       21,     'NDS_RATE_R',    'money',     006,         006,      @SCALE_RESULT UNION ALL
SELECT 'TO',       22,     'OPT_NNDS',      'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       23,     'OPT_YNDS',      'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       24,     'OPT_NDS',       'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       25,     'RET_NNDS',      'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       26,     'RET_YNDS',      'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       27,     'RET_NDS',       'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       28,     'RET_DISC',      'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       29,     'RET_ADD',       'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       30,     'SF_DATE',       'datetime',  000,         000,      00 UNION ALL -- Дата счета-фактуры
SELECT 'TO',       31,     'SF_NUM',        'varchar',   100,         100,      00 UNION ALL -- Номер счета-фактуры
SELECT 'TO',       32,     'SF_DATE_INV',   'datetime',  000,         000,      00 UNION ALL -- Дата приходной накладной поставщика
SELECT 'TO',       33,     'SF_NUM_INV',    'varchar',   100,         100,      00 UNION ALL -- Номер приходной накладной поставщика
SELECT 'TO',       34,     'SF_DATE_P',     'datetime',  000,         000,      00 UNION ALL -- Дата оплаты счета-фактуры
SELECT 'TO',       35,     'SF_INN',        'varchar',   040,         040,      00 UNION ALL -- ИНН
SELECT 'TO',       36,     'SF_KPP',        'varchar',   040,         040,      00 UNION ALL -- КПП
SELECT 'TO',       37,     'SF_SELF',       'varchar',   100,         100,      00 UNION ALL -- Собсвенное юр лицо, учавствующее в движении
SELECT 'TO',       38,     'SUPPL_ID',      'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       39,     'SUPPL_NM',      'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       40,     'ID_PAYER',      'varchar',   040,         040,      00 UNION ALL 
SELECT 'TO',       41,     'PAYER',         'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       42,     'DATE_PAYMENT',  'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       43,     'INV_NUM',       'varchar',   050,         050,      00 UNION ALL
SELECT 'TO',       44,     'INV_DATE',      'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       45,     'CON_NAME',      'varchar',   150,         150,      00 UNION ALL
SELECT 'TO',       46,     'CON_CODE',      'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       47,     'DATE_CON',      'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       48,     'I_O_NUM',       'varchar',   050,         050,      00 UNION ALL
SELECT 'TO',       49,     'I_O_DATE',      'datetime',  000,         000,      00 UNION ALL
SELECT 'TO',       50,     'GTD',           'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       51,     'COUNTRY',       'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       52,     'PER_SER',       'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       53,     'SUM_SER',       'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       54,     'OFF_BALANCE',   'int',       001,         001,      00 UNION ALL
SELECT 'TO',       55,     'GOODS_SENT',    'int',       001,         001,      00 UNION ALL
SELECT 'TO',       56,     'TSTORE_I',      'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       57,     'TSTORE_N',      'varchar',   100,         100,      00 UNION ALL
SELECT 'TO',       58,     'TTSTORE_I',     'varchar',   040,         040,      00 UNION ALL
SELECT 'TO',       59,     'TTSTORE_N',     'varchar',   100,         100,      00 UNION ALL

SELECT 'TO',       60,     'GOODS_CODE',    'varchar',    16,          16,      00 UNION ALL
SELECT 'TO',       61,     'GOODS_NAME',    'varchar',   254,         254,      00 UNION ALL
SELECT 'TO',       62,     'GOODS_MEASURE', 'varchar',    40,          40,      00 UNION ALL

SELECT 'TO',       63,     'RET_TYPE1',     'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       64,     'RET_TYPE2',     'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       65,     'RET_TYPE4',     'money',     015,         015,      @SCALE_RESULT UNION ALL
SELECT 'TO',       66,     'COST',			'money',     015,         015,      @SCALE_RESULT -- Себестоимость

IF @UNLOAD_QUANTITY = 1 
    INSERT @STRUCTURE(TABLE_NAME, COL_ID, COLUMN_NAME, [TYPE_NAME], [PRECISION], LENGTH, SCALE) 
    SELECT 'TO', 30, 'QUANTITY',   'money',    015, 015, @SCALE_RESULT

IF (@PAYMENT_TYPE = 1)
    INSERT @STRUCTURE(TABLE_NAME, COL_ID, COLUMN_NAME, [TYPE_NAME], [PRECISION], LENGTH, SCALE) 
    SElECT 'TO', 27, 'RET_YNDS_K', 'money', 015, 015, @SCALE_RESULT



if object_id('tempdb..#RESULT_TAB') is not null drop table #RESULT_TAB

create table #RESULT_TAB
(
    PDATEBL DATETIME, PDATEEL DATETIME, OPER_CODE VARCHAR(254), DOC_ID VARCHAR(254),
    DOC_NUM VARCHAR(254), DOC_DATE DATETIME, DOC_INNUM VARCHAR(254), DOC_IN_DAT DATETIME,
    STORE_ID VARCHAR(254), STORE_NM VARCHAR(254),
    STORE_TO_I VARCHAR(254), STORE_TO_N VARCHAR(254),
    CONTRGR_ID VARCHAR(254), CONTRGR_NM VARCHAR(254), CONTR_ID VARCHAR(254),
    CONTR_NM VARCHAR(254), CONTR_INN VARCHAR(254),
    NUM_KASSA VARCHAR(254), OPERT BIGINT,
    NDS_RATE DECIMAL(18,4), NDS_RATE_R DECIMAL(18,4),
    OPT_NNDS DECIMAL(18,4), OPT_YNDS DECIMAL(18,4), OPT_NDS DECIMAL(18,4),
    RET_NNDS DECIMAL(18,4), RET_YNDS DECIMAL(18,4), RET_NDS DECIMAL(18,4),
    RET_DISC DECIMAL(18,4), RET_ADD DECIMAL(18,4), 
    QUANTITY DECIMAL(18,2),
    SF_DATE DATETIME,
    SF_NUM VARCHAR(100),
    SF_DATE_INV DATETIME,
    SF_NUM_INV VARCHAR(100),
    SF_DATE_P DATETIME,
    SF_INN VARCHAR(40),
    SF_KPP VARCHAR(40),
    SF_SELF VARCHAR(100),
    SUPPL_ID VARCHAR(254),
    SUPPL_NM VARCHAR(254),
    ID_PAYER BIGINT,
    PAYER VARCHAR(100),
    RET_YNDS_K DECIMAL(18,2),
    DATE_PAYMENT DATETIME,
    INV_NUM VARCHAR(50),
    INV_DATE DATETIME,
    CON_NAME VARCHAR(150),
    CON_CODE VARCHAR(100),
    DATE_CON DATETIME,
    I_O_NUM VARCHAR(50),
    I_O_DATE DATETIME,
    GTD VARCHAR(100),
    COUNTRY VARCHAR(100),
    PER_SER MONEY,
    SUM_SER MONEY,
    OFF_BALANCE BIGINT,
    GOODS_SENT BIGINT,
    TSTORE_I VARCHAR(254),
    TSTORE_N VARCHAR(254),
    TTSTORE_I VARCHAR(254),
    TTSTORE_N VARCHAR(254),
    GOODS_CODE varchar(16),  
    GOODS_NAME varchar(256),  
    GOODS_MEASURE varchar(40),  
    RET_TYPE1 DECIMAL(18,4),
    RET_TYPE2 DECIMAL(18,4),
    RET_TYPE4 DECIMAL(18,4),
	COST DECIMAL(18,4)
)


---------------------------------------------------------------------------------------------------
IF OBJECT_ID('TEMPDB..#DIST_CONTRACTOR_2_CONTRACTOR_GROUP') IS NOT NULL DROP TABLE #DIST_CONTRACTOR_2_CONTRACTOR_GROUP
---------------------------------------------------------------------------------------------------
;WITH cteC2CG AS
(
    SELECT 
        N = ROW_NUMBER()OVER
            (
                PARTITION BY C2CG.ID_CONTRACTOR, C2CG.ID_CONTRACTOR_GROUP 
                ORDER BY CASE WHEN  C2CG.DATE_DELETED IS NULL THEN 1 ELSE 2 END, C2CG.DATE_DELETED DESC, C2CG.ID_CONTRACTOR_2_CONTRACTOR_GROUP
            ),
        C2CG.ID_CONTRACTOR, 
        C2CG.ID_CONTRACTOR_GROUP
        FROM
            CONTRACTOR_2_CONTRACTOR_GROUP C2CG
            INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = C2CG.ID_CONTRACTOR
            INNER JOIN CONTRACTOR_GROUP CG ON CG.ID_CONTRACTOR_GROUP = C2CG.ID_CONTRACTOR_GROUP
        WHERE
            C2CG.DATE_DELETED IS NULL
)
SELECT * 
    INTO #DIST_CONTRACTOR_2_CONTRACTOR_GROUP 
    FROM cteC2CG 
    WHERE N = 1


DECLARE @INDEX VARCHAR(36)
SET @INDEX = REPLACE(CAST(NEWID() AS VARCHAR(40)), '-', '')
EXEC('CREATE INDEX IX_#DIST_CONTRACTOR_2_CONTRACTOR_GROUP_' + @INDEX + '$ID_CONTRACTOR ON #DIST_CONTRACTOR_2_CONTRACTOR_GROUP(ID_CONTRACTOR)')
EXEC('CREATE INDEX IX_#DIST_CONTRACTOR_2_CONTRACTOR_GROUP_' + @INDEX + '$ID_CONTRACTOR_GROUP ON #DIST_CONTRACTOR_2_CONTRACTOR_GROUP(ID_CONTRACTOR_GROUP)')


-------------------------------------------------------------------------------------------
-- ПРИХОДНАЯ НАКЛАДНАЯ
-------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 2))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = 'INVOICE', 
    DOC_ID = I.MNEMOCODE, 
    DOC_NUM = I.MNEMOCODE,
    DOC_DATE = I.DOCUMENT_DATE, 
    DOC_INNUM = I.INCOMING_NUMBER, 
    DOC_IN_DAT = I.INCOMING_DATE,
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
    OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(II.SUPPLIER_VAT AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(II.RETAIL_VAT AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM(II.SUPPLIER_SUM) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(II.SUPPLIER_SUM_VAT) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(II.SUPPLIER_VAT_SUM) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM(II.RETAIL_SUM) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(II.RETAIL_SUM_VAT) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(II.RETAIL_VAT_SUM) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)), 
    RET_ADD = CAST(SUM(ABS(II.RETAIL_SUM - II.SUPPLIER_SUM)) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(II.QUANTITY) AS DECIMAL(18,2)), 
    SF_DATE = I.INCOMING_BILL_DATE, 
    SF_NUM = I.INCOMING_BILL_NUMBER, 
    NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = CONVERT(DATETIME, CONVERT(VARCHAR, DATE_PAYMENT, 104), 104),
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = _CON.NAME,
    CON_CODE = CAST(NULL AS VARCHAR(100)),
    DATE_CON = NULL,
    I_O_NUM = CAST(NULL AS VARCHAR(50)),
    I_O_DATE = NULL,
    GTD = CASE WHEN @GTD=1 THEN L.GTD_NUMBER ELSE NULL END,
    COUNTRY = CASE WHEN @GTD=1 THEN _C.NAME ELSE NULL END,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(SUM_RETAIL * PERCENT_SERVICE/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40)),
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(ii.COST, 0) * ii.QUANTITY) AS DECIMAL(18,4))
FROM 
    INVOICE_ITEM II(NOLOCK)
    INNER JOIN INVOICE I(NOLOCK) ON I.ID_INVOICE_GLOBAL = II.ID_INVOICE_GLOBAL
    INNER JOIN LOT L ON L.ID_DOCUMENT = I.ID_INVOICE_GLOBAL and L.ID_DOCUMENT_ITEM = II.ID_INVOICE_ITEM_GLOBAL
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    inner join producer pr on pr.ID_PRODUCER = g.ID_PRODUCER
    INNER JOIN COUNTRY _C on _C.ID_COUNTRY = pr.ID_COUNTRY
    
    INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO    
    INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT

    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE    
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS _CON on _CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.DOCUMENT_STATE = 'PROC' 
    AND I.DOCUMENT_DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 2))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    II.ID_INVOICE_GLOBAL , I.MNEMOCODE , I.DOCUMENT_DATE, I.INCOMING_NUMBER, I.INCOMING_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    I.INCOMING_BILL_DATE, 
    I.INCOMING_BILL_NUMBER, 
    CASE WHEN @GROUP_NDS = 1 THEN CAST(II.SUPPLIER_VAT AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(II.RETAIL_VAT AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CONVERT(DATETIME, CONVERT(VARCHAR, DATE_PAYMENT, 104), 104),
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CASE WHEN @GTD=1 THEN L.GTD_NUMBER ELSE NULL END,
    CASE WHEN @GTD=1 THEN _C.NAME ELSE NULL END,
	_CON.NAME, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40))

-----------------------------------------------------------------------------------------
--CЧЕТ ФАКТУРА ДЛЯ ПРИХОДНОЙ НАКЛАДНОЙ
-----------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 2))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = 'SCHET_FACTURA_INVOICE', 
    DOC_ID = I.MNEMOCODE, 
    DOC_NUM = I.MNEMOCODE,
    DOC_DATE = I.DOCUMENT_DATE, 
    DOC_INNUM = I.INCOMING_NUMBER, 
    DOC_IN_DAT = I.INCOMING_DATE,
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1 THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
    OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(II.SUPPLIER_VAT AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(II.RETAIL_VAT AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM(II.SUPPLIER_SUM) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(II.SUPPLIER_SUM_VAT) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(II.SUPPLIER_VAT_SUM) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM(II.RETAIL_SUM) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(II.RETAIL_SUM_VAT) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(II.RETAIL_VAT_SUM) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)), 
    RET_ADD = CAST(SUM(ABS(II.RETAIL_SUM - II.SUPPLIER_SUM)) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(II.QUANTITY) AS DECIMAL(18,2)), 
    I.INCOMING_BILL_DATE, 
    I.INCOMING_BILL_NUMBER, 
    I.INCOMING_DATE, 
    I.INCOMING_NUMBER, 
    ISNULL(I.DATE_PAYMENT, I.[DOCUMENT_DATE]), 
    C.INN, 
    C.KPP, 
    (SELECT C.[NAME] FROM CONTRACTOR C INNER JOIN STORE S ON C.ID_CONTRACTOR = S.ID_CONTRACTOR WHERE S.ID_STORE = I.ID_STORE),
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = CAST(NULL AS VARCHAR(100)),
    DATE_CON = NULL,
    I_O_NUM = CAST(NULL AS VARCHAR(50)),
    I_O_DATE = NULL,
    GTD = CASE WHEN @GTD=1 THEN L.GTD_NUMBER ELSE NULL END,
    COUNTRY = CASE WHEN @GTD=1 THEN _C.NAME ELSE NULL END,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(SUM_RETAIL * PERCENT_SERVICE/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40)),
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(ii.COST, 0) * ii.QUANTITY) as DECIMAL(18,4))
FROM 
    INVOICE_ITEM II(NOLOCK)
    INNER JOIN INVOICE I(NOLOCK) ON I.ID_INVOICE_GLOBAL = II.ID_INVOICE_GLOBAL
    INNER JOIN LOT L ON L.ID_DOCUMENT = I.ID_INVOICE_GLOBAL and L.ID_DOCUMENT_ITEM = II.ID_INVOICE_ITEM_GLOBAL
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    inner join producer pr on pr.ID_PRODUCER = g.ID_PRODUCER
    INNER JOIN COUNTRY _C on _C.ID_COUNTRY = pr.ID_COUNTRY

    INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO    
    INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT

    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.DOCUMENT_STATE = 'PROC' AND I.DOCUMENT_DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 2))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
    AND C.MAKE_SCHET_FACTURA = 1
GROUP BY 
    II.ID_INVOICE_GLOBAL , I.MNEMOCODE , I.DOCUMENT_DATE, I.INCOMING_NUMBER, I.INCOMING_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR, I.INCOMING_BILL_DATE, I.INCOMING_BILL_NUMBER, 
    I.DATE_PAYMENT, C.KPP, I.ID_STORE,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(II.SUPPLIER_VAT AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(II.RETAIL_VAT AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CASE WHEN @GTD=1 THEN L.GTD_NUMBER ELSE NULL END,
    CASE WHEN @GTD=1 THEN _C.NAME ELSE NULL END,
    CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40))

-- -------------------------------------------------------------------------------------------
-- -- АКТ ВОЗВРАТА ПОСТАВЩИКУ
-- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 3))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_RETURN_TO_CONTRACTOR',
    DOC_ID = AC.MNEMOCODE, DOC_NUM = AC.MNEMOCODE, DOC_DATE = AC.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),

    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ACI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ACI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ACI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ACI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ACI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ACI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ACI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ACI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ACI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_RETURN_TO_CONTRACTOR_ITEM ACI(NOLOCK)
    INNER JOIN ACT_RETURN_TO_CONTRACTOR AC(NOLOCK) ON AC.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL = ACI.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ACI.ID_LOT_GLOBAL
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = AC.ID_CONTRACTOR_TO
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = AC.ID_STORE
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = AC.ID_PAYER
WHERE 
    AC.DOCUMENT_STATE = 'PROC' 
    AND AC.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 3))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ACI.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL, AC.MNEMOCODE, AC.DATE,
    
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ РАЗУКОМПЛЕКТАЦИИ - СТАРЫЕ ТОВАРЫ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 6))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_DISASSEMBLING',
    DOC_ID = ADS.MNEMOCODE, DOC_NUM = ADS.MNEMOCODE, DOC_DATE = ADS.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME), 
    
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ADSI.QUANTITY_FROM) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ADSI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ADSI.QUANTITY_FROM) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ADSI.QUANTITY_FROM) as DECIMAL(18,4))
FROM 
    ACT_DISASSEMBLING_ITEM ADSI(NOLOCK)
    INNER JOIN ACT_DISASSEMBLING ADS(NOLOCK) ON ADS.ID_ACT_DISASSEMBLING_GLOBAL = ADSI.ID_ACT_DISASSEMBLING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = ADSI.ID_LOT_FROM
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = ADS.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    ADS.DOCUMENT_STATE = 'PROC' AND ADS.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 6))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ADSI.ID_ACT_DISASSEMBLING_GLOBAL, ADS.MNEMOCODE, ADS.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ РАЗУКОМПЛЕКТАЦИИ - НОВЫЕ ТОВАРЫ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 6)) AND 0=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_DISASSEMBLING',
    DOC_ID = ADS.MNEMOCODE, DOC_NUM = ADS.MNEMOCODE, DOC_DATE = ADS.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME), 
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ADSI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ADSI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ADSI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ADSI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ADSI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ADSI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ADSI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ADSI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ADSI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_DISASSEMBLING_ITEM ADSI(NOLOCK)
    INNER JOIN ACT_DISASSEMBLING ADS(NOLOCK) ON ADS.ID_ACT_DISASSEMBLING_GLOBAL = ADSI.ID_ACT_DISASSEMBLING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_DOCUMENT_ITEM = ADSI.ID_ACT_DISASSEMBLING_ITEM_GLOBAL AND L.ID_DOCUMENT = ADSI.ID_ACT_DISASSEMBLING_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = ADS.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    ADS.DOCUMENT_STATE = 'PROC' AND ADS.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 6))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ADSI.ID_ACT_DISASSEMBLING_GLOBAL, ADS.MNEMOCODE, ADS.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

---------------------------------------------------------------------------------------------------
-- #CHEQUE_LIST
---------------------------------------------------------------------------------------------------
if object_id('tempdb..#CHEQUE_LIST') is not null drop table #CHEQUE_LIST
create table #CHEQUE_LIST
(
    ID_CHEQUE int,
    ID_CHEQUE_GLOBAL uniqueidentifier primary key,
    ID_CASH_SESSION_GLOBAL uniqueidentifier,
    CHEQUE_TYPE varchar(20),
    CHEQUE_TYPE_int int,
    MNEMOCODE varchar(50), 
    DATE_CHEQUE datetime,
    DOCUMENT_STATE varchar(20)
)


IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA in (19,7)))
BEGIN
    insert into #CHEQUE_LIST 
        (
            ID_CHEQUE,
            ID_CHEQUE_GLOBAL,
            ID_CASH_SESSION_GLOBAL,
            CHEQUE_TYPE,
            CHEQUE_TYPE_int,
            MNEMOCODE, 
            DATE_CHEQUE,
            DOCUMENT_STATE
        )
        select distinct
            CH.ID_CHEQUE,
            CH.ID_CHEQUE_GLOBAL,
            CH.ID_CASH_SESSION_GLOBAL,
            CH.CHEQUE_TYPE,
            CHEQUE_TYPE_int = CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END,
            CH.MNEMOCODE, 
            CH.DATE_CHEQUE,
            CH.DOCUMENT_STATE
            from
                CHEQUE CH
                INNER JOIN CASH_SESSION CS ON CS.ID_CASH_SESSION_GLOBAL = CH.ID_CASH_SESSION_GLOBAL
            where
                CS.DATE_CLOSE BETWEEN @DATE_FROM AND @DATE_TO
                and CH.DOCUMENT_STATE = 'PROC' 
END

declare @SqlCreateIndex varchar(1000)
set @SqlCreateIndex = 'CREATE INDEX IX_'+REPLACE(CAST(newid() as varchar(36)),'-','')+' ON [#CHEQUE_LIST](ID_CASH_SESSION_GLOBAL)'
exec(@SqlCreateIndex)
set @SqlCreateIndex = 'CREATE INDEX IX_'+REPLACE(CAST(newid() as varchar(36)),'-','')+' ON [#CHEQUE_LIST](ID_CHEQUE_GLOBAL)'
exec(@SqlCreateIndex)

--- 55555
SET @CASH_SESSION_MOVE =1

-- -- -------------------------------------------------------------------------------------------
-- -- -- КАССОВАЯ СМЕНА
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 19)) AND ISNULL(@CASH_SESSION_MOVE,0)=0
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'CASH_SESSION',
    
    DOC_ID = ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
    DOC_NUM = ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
    DOC_DATE = CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END,
    DOC_INNUM = CAST(NULL AS VARCHAR(40)), 
    
    DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), 
    OPERT = 1,
    
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = NULL,
    
    OPT_NNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (L.PRICE_SUP - L.PVAT_SUP) *CP.QUANTITY) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * L.PRICE_SUP * CP.QUANTITY) AS DECIMAL(18,4)), 
    OPT_NDS  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * L.PVAT_SUP * CP.QUANTITY) AS DECIMAL(18,4)),
    
    RET_NNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (CP.SUMM - (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL))) ) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM) AS DECIMAL(18,4)), 
    RET_NDS  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL)) ) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM_DISCOUNT) AS DECIMAL(18,4)),
    RET_ADD  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * ABS((CP.SUMM - (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL))) - (L.PRICE_SUP-L.PVAT_SUP)*CP.QUANTITY )) AS DECIMAL(18,4)),
    
    QUANTITY = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY *(L.NUMERATOR/convert(money,L.DENOMINATOR))) AS DECIMAL(18,2)),
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
     
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME] ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = CAST(SUM(CASE WHEN CP.TYPE_PAYMENT IN ('TYPE2','TYPE3') THEN -- была оплата безналом
                                CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (L.PRICE_SAL * CP.QUANTITY-CP.SUMM_DISCOUNT)--((CONVERT(DECIMAL(18,8), CP.SUMM) / CH.SUMM) * CHI.SUMM)
                                ELSE 0
                           END) AS DECIMAL(18,2)),    	

    DATE_PAYMENT = NULL,
    INV_NUM  = NULL,
    INV_DATE = NULL,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
	
    RET_TYPE1 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * CP.[k1]) AS DECIMAL(18, 4)), 
    RET_TYPE2 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * CP.[k2]) AS DECIMAL(18, 4)), 
    RET_TYPE4 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * CP.[k4]) AS DECIMAL(18, 4)),
	COST = cast(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * ISNULL(l.COST, 0) * CP.QUANTITY) as DECIMAL(18,4))

FROM 
	CASH_SESSION CS
    INNER JOIN CASH_REGISTER CR ON CS.ID_CASH_REGISTER = CR.ID_CASH_REGISTER  
    INNER JOIN CONTRACTOR C ON CR.ID_CONTRACTOR = C.ID_CONTRACTOR  
    INNER JOIN #CHEQUE_LIST CH ON CS.ID_CASH_SESSION_GLOBAL = CH.ID_CASH_SESSION_GLOBAL  
    INNER JOIN 
    (
        SELECT  
            s.ID_CHEQUE_GLOBAL,  
            TYPE_PAYMENT = CP.SEPARATE_TYPE,--CP.TYPE_PAYMENT,  
            QUANTITY = CH_I.QUANTITY,  
            ID_LOT_GLOBAL = CH_I.ID_LOT_GLOBAL, 
                    SUMM_DISCOUNT = CH_I.SUMM_DISCOUNT,
            SUMM = CH_I.SUMM,
            --s.[Total],
            --s.[TYPE1],
            s.[k1],
            --s.[TYPE2],
            s.[k2],
            --s.[TYPE4],
            s.[k4]

            FROM 
            (
                select 
                    t.[ID_CHEQUE_GLOBAL],
                    t.[ID_CHEQUE_PAYMENT],
                    --[Total] = cast(t.[Total] as numeric(19,4)),
                    --[TYPE1] = cast(t.[TYPE1] as numeric(19,4)),
                    [k1]    = cast(case when t.[Total] <> 0 then t.[TYPE1]/t.[Total] else 0 end as numeric(19,8)),
                    --[TYPE2] = cast(t.[TYPE2] as numeric(19,4)),
                    [k2]    = cast(case when t.[Total] <> 0 then t.[TYPE2]/t.[Total] else 0 end as numeric(19,8)),
                    --[TYPE4] = cast(t.[TYPE4] as numeric(19,4)),
                    [k4]    = cast(case when t.[Total] <> 0 then t.[TYPE4]/t.[Total] else 0 end as numeric(19,8))
                    from 
                    (
                        SELECT 
                            CP.[ID_CHEQUE_GLOBAL],
                            [ID_CHEQUE_PAYMENT]=MAX(CP.ID_CHEQUE_PAYMENT), 
                            [Total] = cast(SUM(CP.SUMM) as numeric(19,8)),
                            [TYPE1] = SUM(case when 'TYPE1' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                            [TYPE2] = SUM(case when 'TYPE2' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                            [TYPE4] = SUM(case when 'TYPE4' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end)
                            FROM 
                CHEQUE_PAYMENT CP  
                                inner join #CHEQUE_LIST t on t.ID_CHEQUE_GLOBAL = cp.ID_CHEQUE_GLOBAL
                            GROUP BY 
                                CP.ID_CHEQUE_GLOBAL
                    )t
            ) s
            inner join CHEQUE_PAYMENT CP on CP.ID_CHEQUE_PAYMENT = s.ID_CHEQUE_PAYMENT
            inner join CHEQUE_ITEM CH_I ON CH_I.ID_CHEQUE_GLOBAL = s.ID_CHEQUE_GLOBAL  

    ) CP ON CP.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL  


    INNER JOIN MV_LOT_SERVICE L ON L.ID_LOT_GLOBAL = CP.ID_LOT_GLOBAL
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1

    WHERE 1=1
        AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
        AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 19))
        AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = CR.ID_CONTRACTOR))

    GROUP BY 
	    CS.ID_CASH_SESSION_GLOBAL, 
	    CS.MNEMOCODE, 
	    ID_CASH_SESSION, 
	    CR.NAME_CASH_REGISTER, 
	    CS.DATE_OPEN, 
	    CS.DATE_CLOSE,
        CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
        CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
        CASE WHEN @PAYMENT_TYPE_GROUPS=1 THEN CAST(CP.TYPE_PAYMENT AS VARCHAR(50)) ELSE NULL END,
        CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
        CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
        C.ID_CONTRACTOR, C.NAME, C.INN,
        CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
        CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
        CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME] ELSE NULL END,
        CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
        CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
        CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END

-- -- -------------------------------------------------------------------------------------------
-- -- -- КАССОВАЯ СМЕНА (по движению)
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 19)) AND @CASH_SESSION_MOVE=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = 'CASH_SESSION',
    DOC_ID = ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
    DOC_NUM = ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
    DOC_DATE = CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END,
    DOC_INNUM = CAST(NULL AS VARCHAR(40)), 
    DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), 
    OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = NULL,
    OPT_NNDS = CAST(SUM((LM.SUM_SUP-LM.SVAT_SUP) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),

    RET_NNDS = CAST(SUM((LM.SUM_ACC-LM.SVAT_ACC) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(LM.DISCOUNT_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC - LM.SVAT_ACC) - (LM.SUM_SUP - LM.SVAT_SUP)) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),

    QUANTITY = CAST(SUM(LM.QUANTITY_SUB * (L.NUMERATOR/convert(money,L.DENOMINATOR))) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME]          ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K =  CAST(SUM(CASE WHEN CP.TYPE_PAYMENT IN ('TYPE2','TYPE3') THEN -- была оплата безналом
                                CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (L.PRICE_SAL * CP.QUANTITY-CP.SUMM_DISCOUNT)--((CONVERT(DECIMAL(18,8), CP.SUMM) / CH.SUMM) * CHI.SUMM)
                                ELSE 0
                           END) AS DECIMAL(18,2)),
    DATE_PAYMENT = NULL,
    INV_NUM  = NULL,
    INV_DATE = NULL,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,

    RET_TYPE1 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB)* CP.[k1]) AS DECIMAL(18, 4)), 
    RET_TYPE2 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB)* CP.[k2]) AS DECIMAL(18, 4)), 
    RET_TYPE4 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB)* CP.[k4]) AS DECIMAL(18, 4)),
	COST = cast(SUM(ISNULL(l.COST, 0) * LM.QUANTITY_SUB) as DECIMAL(18,4))


    FROM 
        CASH_SESSION CS
    INNER JOIN CASH_REGISTER CR ON CS.ID_CASH_REGISTER = CR.ID_CASH_REGISTER  
    INNER JOIN CONTRACTOR C ON CR.ID_CONTRACTOR = C.ID_CONTRACTOR  
    INNER JOIN #CHEQUE_LIST CH ON CS.ID_CASH_SESSION_GLOBAL = CH.ID_CASH_SESSION_GLOBAL  
        INNER JOIN 
        (
            SELECT  
            ID_CHEQUE_GLOBAL = s.ID_CHEQUE_GLOBAL,  
                TYPE_PAYMENT = CP.SEPARATE_TYPE,--CP.TYPE_PAYMENT,  
                QUANTITY = CH_I.QUANTITY,  
                ID_LOT_GLOBAL = CH_I.ID_LOT_GLOBAL, 
            SUMM_DISCOUNT = CH_I.SUMM_DISCOUNT,
            ID_CHEQUE_ITEM_GLOBAL = CH_I.ID_CHEQUE_ITEM_GLOBAL,
                 
            --s.[Total],
            --s.[TYPE1],
            s.[k1],
            --s.[TYPE2],
            s.[k2],
            --s.[TYPE4],
            s.[k4]

                FROM 
            (
                select 
                    t.[ID_CHEQUE_GLOBAL],
                    t.[ID_CHEQUE_PAYMENT],
                    --[Total] = cast(t.[Total] as numeric(19,4)),
                    --[TYPE1] = cast(t.[TYPE1] as numeric(19,4)),
                    [k1]    = cast(case when t.[Total] <> 0 then t.[TYPE1]/t.[Total] else 0 end as numeric(19,8)),
                    --[TYPE2] = cast(t.[TYPE2] as numeric(19,4)),
                    [k2]    = cast(case when t.[Total] <> 0 then t.[TYPE2]/t.[Total] else 0 end as numeric(19,8)),
                    --[TYPE4] = cast(t.[TYPE4] as numeric(19,4)),
                    [k4]    = cast(case when t.[Total] <> 0 then t.[TYPE4]/t.[Total] else 0 end as numeric(19,8))
                    from 
                    (
                        SELECT 
                            CP.[ID_CHEQUE_GLOBAL],
                            [ID_CHEQUE_PAYMENT]=MAX(CP.ID_CHEQUE_PAYMENT), 
                            [Total] = cast(SUM(CP.SUMM) as numeric(19,8)),
                            [TYPE1] = SUM(case when 'TYPE1' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                            [TYPE2] = SUM(case when 'TYPE2' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                            [TYPE4] = SUM(case when 'TYPE4' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end)
                            FROM 
                    CHEQUE_PAYMENT CP  
                                inner join #CHEQUE_LIST t on t.ID_CHEQUE_GLOBAL = cp.ID_CHEQUE_GLOBAL
                            GROUP BY 
                                CP.ID_CHEQUE_GLOBAL--,
                    )t
            ) s
            inner join CHEQUE_PAYMENT CP on CP.ID_CHEQUE_PAYMENT = s.ID_CHEQUE_PAYMENT
            inner join CHEQUE_ITEM CH_I ON CH_I.ID_CHEQUE_GLOBAL = s.ID_CHEQUE_GLOBAL  

    ) CP ON CP.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL  

    INNER JOIN MV_LOT_SERVICE L ON L.ID_LOT_GLOBAL = CP.ID_LOT_GLOBAL
    inner join MV_LOT_SERVICE_MOVEMENT lm on lm.ID_DOCUMENT = CS.ID_CASH_SESSION_GLOBAL AND lm.ID_DOCUMENT_ITEM = cp.ID_CHEQUE_ITEM_GLOBAL
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    
WHERE 1=1 
            AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
            AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 19))
            AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = CR.ID_CONTRACTOR))

        GROUP BY 
            ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
            CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,    
    --CP.TYPE_PAYMENT,
            CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
            CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
            CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
            C.NAME, 
            C.INN,
            CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), 
            CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
            CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
            CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME]          ELSE NULL END,
            CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -------------------------------------------------------------------------------------------
-- -- -- КАССОВЫЕ ЧЕКИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 7)) AND ISNULL(@CASH_SESSION_MOVE,0)=0 AND 0=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, 
    OPER_CODE = CASE WHEN @CHEQUE_GROUP=1 THEN 'CHEQUE' ELSE 'CASH_SESSION' END,
    
    DOC_ID   = CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.ID_CHEQUE AS VARCHAR(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    DOC_NUM  = CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.MNEMOCODE as varchar(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    DOC_DATE = CASE WHEN @CHEQUE_GROUP=1 THEN CH.DATE_CHEQUE ELSE CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END END,
    
    DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = NULL,
    OPT_NNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (L.PRICE_SUP - L.PVAT_SUP) * CP.QUANTITY) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * L.PRICE_SUP * CP.QUANTITY) AS DECIMAL(18,4)), 
    OPT_NDS  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * L.PVAT_SUP * CP.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (CP.SUMM - (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL))) ) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM) AS DECIMAL(18,4)), 
    RET_NDS  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL)) ) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM_DISCOUNT) AS DECIMAL(18,4)),
    RET_ADD  = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * ABS((CP.SUMM - (CP.SUMM * L.VAT_SAL / (100 + L.VAT_SAL))) - (L.PRICE_SUP - L.PVAT_SUP) * CP.QUANTITY))  AS DECIMAL(18,4)),

    QUANTITY = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME] ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K =  CAST(SUM(CASE WHEN CP.TYPE_PAYMENT IN ('TYPE2','TYPE3') THEN -- была оплата безналом
                            CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (L.PRICE_SAL * CP.QUANTITY-CP.SUMM_DISCOUNT)--((CONVERT(DECIMAL(18,8), CP.SUMM) / CH.SUMM) * CHI.SUMM)
                            ELSE 0
                       END) AS DECIMAL(18,2)),
    DATE_PAYMENT = NULL,
    INV_NUM  = case when CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY) AS DECIMAL(18,2)) > 0 then CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END else  null end,
    INV_DATE = case when CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY) AS DECIMAL(18,2)) > 0 then CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END else  null end,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_MEASURE ELSE NULL END) AS VARCHAR(40)),

    RET_TYPE1 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * cp.[k1]) AS DECIMAL(18, 4)),
    RET_TYPE2 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * cp.[k2]) AS DECIMAL(18, 4)),
    RET_TYPE4 = CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * CP.SUMM * cp.[k4]) AS DECIMAL(18, 4)),
	COST = cast(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * ISNULL(l.COST, 0) * CP.QUANTITY) as DECIMAL(18,4)) 

    FROM 
        CASH_SESSION CS
    INNER JOIN CASH_REGISTER CR ON CS.ID_CASH_REGISTER = CR.ID_CASH_REGISTER
    INNER JOIN CONTRACTOR C ON CR.ID_CONTRACTOR = C.ID_CONTRACTOR  
    INNER JOIN #CHEQUE_LIST CH ON CS.ID_CASH_SESSION_GLOBAL = CH.ID_CASH_SESSION_GLOBAL  
    INNER JOIN 
    (
        SELECT  
            s.ID_CHEQUE_GLOBAL,  
            TYPE_PAYMENT = CP.SEPARATE_TYPE,--CP.TYPE_PAYMENT,  
            QUANTITY = CH_I.QUANTITY,  
            ID_LOT_GLOBAL = CH_I.ID_LOT_GLOBAL, 
            SUMM_DISCOUNT = CH_I.SUMM_DISCOUNT,
            SUMM = CH_I.SUMM,

            --s.[Total],
            --s.[TYPE1],
            s.[k1],
            --s.[TYPE2],
            s.[k2],
            --s.[TYPE4],
            s.[k4]

            FROM 
                (
                    select 
                        t.[ID_CHEQUE_GLOBAL],
                        t.[ID_CHEQUE_PAYMENT],
                        --[Total] = cast(t.[Total] as numeric(19,4)),
                        --[TYPE1] = cast(t.[TYPE1] as numeric(19,4)),
                        [k1]    = cast(case when t.[Total] <> 0 then t.[TYPE1]/t.[Total] else 0 end as numeric(19,8)),
                        --[TYPE2] = cast(t.[TYPE2] as numeric(19,4)),
                        [k2]    = cast(case when t.[Total] <> 0 then t.[TYPE2]/t.[Total] else 0 end as numeric(19,8)),
                        --[TYPE4] = cast(t.[TYPE4] as numeric(19,4)),
                        [k4]    = cast(case when t.[Total] <> 0 then t.[TYPE4]/t.[Total] else 0 end as numeric(19,8))
                        from 
                        (
                            SELECT 
                                CP.[ID_CHEQUE_GLOBAL],
                                [ID_CHEQUE_PAYMENT]=MAX(CP.ID_CHEQUE_PAYMENT), 
                                [Total] = cast(SUM(CP.SUMM) as numeric(19,8)),
                                [TYPE1] = SUM(case when 'TYPE1' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                                [TYPE2] = SUM(case when 'TYPE2' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                                [TYPE4] = SUM(case when 'TYPE4' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end)
                                FROM 
                                    CHEQUE_PAYMENT CP  
                                    inner join #CHEQUE_LIST t on t.ID_CHEQUE_GLOBAL = cp.ID_CHEQUE_GLOBAL
                                GROUP BY 
                                    CP.ID_CHEQUE_GLOBAL--,
                        )t
                ) s
                inner join CHEQUE_PAYMENT CP on CP.ID_CHEQUE_PAYMENT = s.ID_CHEQUE_PAYMENT
                inner join CHEQUE_ITEM CH_I ON CH_I.ID_CHEQUE_GLOBAL = s.ID_CHEQUE_GLOBAL  

    ) CP ON CP.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL  

    -- ТОВАР+УСЛУГА
    INNER JOIN MV_LOT_SERVICE L ON L.ID_LOT_GLOBAL = CP.ID_LOT_GLOBAL
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL   AND @LAYOUT_GROUPS=1

WHERE 1=1
        AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
        AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 7))
        AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = CR.ID_CONTRACTOR))

    GROUP BY 
        CS.ID_CASH_SESSION_GLOBAL, CS.MNEMOCODE, ID_CASH_SESSION, CR.NAME_CASH_REGISTER, CS.DATE_OPEN, CS.DATE_CLOSE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
        CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
        CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
        C.ID_CONTRACTOR, C.NAME, C.INN,
        CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
        CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
        CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME]          ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	    CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
        CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_CODE ELSE NULL END) AS VARCHAR(16)),
        CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_MEASURE ELSE NULL END) AS VARCHAR(40)),
    CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.ID_CHEQUE AS VARCHAR(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.MNEMOCODE as varchar(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    CASE WHEN @CHEQUE_GROUP=1 THEN CH.DATE_CHEQUE ELSE CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END END

-- -------------------------------------------------------------------------------------------
-- -- -- КАССОВЫЕ ЧЕКИ (по движению)
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 7)) AND @CASH_SESSION_MOVE=1 AND 0=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = CASE WHEN @CHEQUE_GROUP=1 THEN 'CHEQUE' ELSE 'CASH_SESSION' END,

    DOC_ID   = CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.ID_CHEQUE AS VARCHAR(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    DOC_NUM  = CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.MNEMOCODE as varchar(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    DOC_DATE = CASE WHEN @CHEQUE_GROUP=1 THEN CH.DATE_CHEQUE ELSE CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END END,

    DOC_INNUM = CAST(NULL AS VARCHAR(40)), 
    DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), 
    OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = NULL,
    OPT_NNDS = CAST(SUM((LM.SUM_SUP-LM.SVAT_SUP) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),

    RET_NNDS = CAST(SUM((LM.SUM_ACC-LM.SVAT_ACC) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(LM.DISCOUNT_ACC * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC - LM.SVAT_ACC) - (LM.SUM_SUP - LM.SVAT_SUP)) * SIGN(LM.QUANTITY_SUB)) AS DECIMAL(18,4)),

    QUANTITY = CAST(SUM(LM.QUANTITY_SUB) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME]          ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K =  CAST(SUM(CASE WHEN CP.TYPE_PAYMENT IN ('TYPE2','TYPE3') THEN -- была оплата безналом
                            CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN -1 ELSE 1 END * (LM.SUM_ACC)--((CONVERT(DECIMAL(18,8), CP.SUMM) / CH.SUMM) * CHI.SUMM)
                            ELSE 0
                       END) AS DECIMAL(18,2)),    

    DATE_PAYMENT = NULL,
    INV_NUM  = case when CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY) AS DECIMAL(18,2)) > 0 then CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM  ELSE NULL END else  null end,
    INV_DATE = case when CAST(SUM(CASE WHEN CH.CHEQUE_TYPE = 'RETURN' THEN 0 ELSE 1 END * CP.QUANTITY) AS DECIMAL(18,2)) > 0 then CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END else  null end,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_MEASURE ELSE NULL END) AS VARCHAR(40)),

    RET_TYPE1 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB) * cp.[k1]) AS DECIMAL(18, 4)),
    RET_TYPE2 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB) * cp.[k2]) AS DECIMAL(18, 4)),
    RET_TYPE4 = CAST(SUM(LM.SUM_ACC * SIGN(LM.QUANTITY_SUB) * cp.[k4]) AS DECIMAL(18, 4)),
	COST = cast(SUM(ISNULL(l.COST, 0) * LM.QUANTITY_SUB) as DECIMAL(18,4))

FROM 
CASH_SESSION CS
INNER JOIN CASH_REGISTER CR ON CS.ID_CASH_REGISTER = CR.ID_CASH_REGISTER  
INNER JOIN CONTRACTOR C ON CR.ID_CONTRACTOR = C.ID_CONTRACTOR  
    INNER JOIN #CHEQUE_LIST CH ON CS.ID_CASH_SESSION_GLOBAL = CH.ID_CASH_SESSION_GLOBAL  
INNER JOIN 
(
    SELECT  
            s.ID_CHEQUE_GLOBAL,  
        TYPE_PAYMENT = CP.SEPARATE_TYPE,--CP.TYPE_PAYMENT,  
        QUANTITY = CH_I.QUANTITY,  
        ID_LOT_GLOBAL = CH_I.ID_LOT_GLOBAL, 
            SUMM_DISCOUNT = CH_I.SUMM_DISCOUNT,
            ID_CHEQUE_ITEM_GLOBAL = CH_I.ID_CHEQUE_ITEM_GLOBAL,
                 
            --s.[Total],
            --s.[TYPE1],
            s.[k1],
            --s.[TYPE2],
            s.[k2],
            --s.[TYPE4],
            s.[k4]

        FROM 
                (
                    select 
                        t.[ID_CHEQUE_GLOBAL],
                        t.[ID_CHEQUE_PAYMENT],
                        --[Total] = cast(t.[Total] as numeric(19,4)),
                        --[TYPE1] = cast(t.[TYPE1] as numeric(19,4)),
                        [k1]    = cast(case when t.[Total] <> 0 then t.[TYPE1]/t.[Total] else 0 end as numeric(19,8)),
                        --[TYPE2] = cast(t.[TYPE2] as numeric(19,4)),
                        [k2]    = cast(case when t.[Total] <> 0 then t.[TYPE2]/t.[Total] else 0 end as numeric(19,8)),
                        --[TYPE4] = cast(t.[TYPE4] as numeric(19,4)),
                        [k4]    = cast(case when t.[Total] <> 0 then t.[TYPE4]/t.[Total] else 0 end as numeric(19,8))
                        from 
                        (
                            SELECT 
                                CP.[ID_CHEQUE_GLOBAL],
                                [ID_CHEQUE_PAYMENT]=MAX(CP.ID_CHEQUE_PAYMENT), 
                                [Total] = cast(SUM(CP.SUMM) as numeric(19,8)),
                                [TYPE1] = SUM(case when 'TYPE1' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                                [TYPE2] = SUM(case when 'TYPE2' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end), 
                                [TYPE4] = SUM(case when 'TYPE4' in (TYPE_PAYMENT,SEPARATE_TYPE) then CP.SUMM else 0 end)
                                FROM 
            CHEQUE_PAYMENT CP  
                                    inner join #CHEQUE_LIST t on t.ID_CHEQUE_GLOBAL = cp.ID_CHEQUE_GLOBAL
                                GROUP BY 
                                    CP.ID_CHEQUE_GLOBAL--,
                        )t
                ) s
                inner join CHEQUE_PAYMENT CP on CP.ID_CHEQUE_PAYMENT = s.ID_CHEQUE_PAYMENT
                inner join CHEQUE_ITEM CH_I ON CH_I.ID_CHEQUE_GLOBAL = s.ID_CHEQUE_GLOBAL  

) CP ON CP.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL  

-- ТОВАР+УСЛУГА
INNER JOIN MV_LOT_SERVICE L ON L.ID_LOT_GLOBAL = CP.ID_LOT_GLOBAL
inner join MV_LOT_SERVICE_MOVEMENT lm on lm.ID_DOCUMENT = CS.ID_CASH_SESSION_GLOBAL AND lm.ID_DOCUMENT_ITEM = cp.ID_CHEQUE_ITEM_GLOBAL
LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
LEFT JOIN CONTRACTOR_GROUP CG ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1

WHERE 1=1
    AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 7))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = CR.ID_CONTRACTOR))

GROUP BY 
    ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))), 
    CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(L.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN L.STORE_NM ELSE NULL END,
    --CP.TYPE_PAYMENT,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    C.NAME, 
    C.INN,
    CAST(CR.NAME_CASH_REGISTER AS VARCHAR(40)), 
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_ID_CONTRACTOR] ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN L.[SUP_NAME]          ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_CODE ELSE NULL END) AS VARCHAR(16)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN L.GOODS_MEASURE ELSE NULL END) AS VARCHAR(40)),
    CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.ID_CHEQUE AS VARCHAR(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    CASE WHEN @CHEQUE_GROUP=1 THEN CAST(CH.MNEMOCODE as varchar(50)) ELSE ISNULL(CS.MNEMOCODE, CAST(ID_CASH_SESSION AS VARCHAR(50))) END, 
    CASE WHEN @CHEQUE_GROUP=1 THEN CH.DATE_CHEQUE ELSE CASE WHEN @CASH_SESSION_DATE_CLOSE=1 THEN CS.DATE_CLOSE ELSE CS.DATE_OPEN END END

-- -- -------------------------------------------------------------------------------------------
-- -- -- ПЕРЕМЕЩЕНИЕ ТОВАРА - ОТПРАВИТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'MOVEMENT',
    DOC_ID = M.MNEMOCODE, DOC_NUM = M.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(S.ID_STORE AS VARCHAR(40)),
    STORE_NM = S.NAME,
    STORE_TO_I = (SELECT TOP 1 CAST(S_TO.ID_STORE AS VARCHAR(40)) FROM STORE S_TO(NOLOCK) WHERE M.ID_STORE_TO = S_TO.ID_STORE),
    STORE_TO_N = (SELECT TOP 1 S_TO.NAME FROM STORE S_TO(NOLOCK) WHERE M.ID_STORE_TO = S_TO.ID_STORE),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40)),
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))
FROM 
    MOVEMENT_ITEM MI(NOLOCK)
    INNER JOIN MOVEMENT M(NOLOCK) ON M.ID_MOVEMENT_GLOBAL = MI.ID_MOVEMENT_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    
    LEFT JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    LEFT JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO    
    LEFT JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT

    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = M.ID_STORE_FROM
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = M.ID_PAYER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    S.ID_CONTRACTOR, MI.ID_MOVEMENT_GLOBAL, M.MNEMOCODE, M.DATE,
    CAST(S.ID_STORE AS VARCHAR(40)),
    S.NAME,
    M.ID_STORE_TO, 
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40))


-- -- -------------------------------------------------------------------------------------------
-- -- -- ПЕРЕМЕЩЕНИЕ ТОВАРА - ПОЛУЧАТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'MOVEMENT',
    DOC_ID = M.MNEMOCODE, DOC_NUM = M.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),

    STORE_ID = (SELECT TOP 1 CAST(S_FROM.ID_STORE AS VARCHAR(40)) FROM STORE S_FROM(NOLOCK) WHERE M.ID_STORE_FROM = S_FROM.ID_STORE),
    STORE_NM = (SELECT TOP 1 S_FROM.NAME FROM STORE S_FROM(NOLOCK) WHERE M.ID_STORE_FROM = S_FROM.ID_STORE),
    STORE_TO_I = CAST(S.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = S.NAME,

    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    GOODS_NAME = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    GOODS_MEASURE = CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40)),
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))
FROM 
    MOVEMENT_ITEM MI(NOLOCK)
    INNER JOIN MOVEMENT M(NOLOCK) ON M.ID_MOVEMENT_GLOBAL = MI.ID_MOVEMENT_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_TO
    
    LEFT JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    LEFT JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO    
    LEFT JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT

    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = M.ID_STORE_TO
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = M.ID_PAYER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    S.ID_CONTRACTOR , MI.ID_MOVEMENT_GLOBAL , M.MNEMOCODE , M.DATE, 
    S.ID_STORE,
    S.NAME,
    M.ID_STORE_FROM, 
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.CODE ELSE NULL END) AS VARCHAR(16)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN G.NAME ELSE NULL END) AS VARCHAR(256)),
    CAST((CASE WHEN @CODE_NAME_UNIT_GROUPS = 1 THEN U.SHORT_NAME ELSE NULL END) AS VARCHAR(40))
-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ВОЗВРАТА ОТ ПОКУПАТЕЛЯ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 12))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_RETURN_TO_BUYER',
    DOC_ID = AB.MNEMOCODE, DOC_NUM = AB.MNEMOCODE, DOC_DATE = AB.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C_FROM.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C_FROM.NAME,    
    CONTR_INN = C_FROM.INN,   
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,  
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ABI.QUANTITY) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(L.PRICE_SUP * ABI.QUANTITY) AS DECIMAL(18,2)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ABI.QUANTITY) AS DECIMAL(18,4)),
   
    RET_NNDS = CAST(SUM(ABI.SUM_SAL-ABI.SVAT_SAL) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(ABI.SUM_SAL) AS DECIMAL(18,4)), 
    RET_NDS  = CAST(SUM(ABI.SVAT_SAL) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(L.PRICE_SAL-ABI.PRICE_PER_UNIT) AS DECIMAL(18,4)),
    RET_ADD  = CAST(SUM(ABS((ABI.SUM_SAL-ABI.SVAT_SAL) - (L.PRICE_SUP-L.PVAT_SUP) * ABI.QUANTITY)) AS DECIMAL(18,4)),
    
    QUANTITY = CAST(SUM(ABI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = CON.NAME,
    CON_CODE = CON.CONTRACTOR_CODE,
    DATE_CON = CON.DATE_CONTRACTS,
    I_O_NUM = I_O.MNEMOCODE,
    I_O_DATE = I_O.DATE,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL ,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ABI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_RETURN_TO_BUYER_ITEM ABI(NOLOCK)
    INNER JOIN ACT_RETURN_TO_BUYER AB(NOLOCK) ON AB.ID_ACT_RETURN_TO_BUYER = ABI.ID_ACT_RETURN_TO_BUYER
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ABI.ID_LOT_GLOBAL OR L.ID_DOCUMENT_ITEM = ABI.ID_ACT_RETURN_TO_BUYER_ITEM_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = AB.ID_STORE_TO
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR C_FROM ON C_FROM.ID_CONTRACTOR = AB.ID_CONTRACTOR_FROM
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = AB.ID_CONTRACTS_GLOBAL
	LEFT JOIN INVOICE_OUT I_O ON I_O.ID_INVOICE_OUT_GLOBAL  = AB.ID_DOCUMENT_BASE_GLOBAL
WHERE 
    AB.DOCUMENT_STATE = 'PROC' AND AB.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 12))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ABI.ID_ACT_RETURN_TO_BUYER_GLOBAL, AB.MNEMOCODE, AB.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C_FROM.ID_CONTRACTOR, C_FROM.NAME, C_FROM.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON.NAME, CON.CONTRACTOR_CODE, CON.DATE_CONTRACTS,
    I_O.MNEMOCODE, I_O.DATE, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ СПИСАНИЯ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 20))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_DEDUCTION',
    DOC_ID = AD.MNEMOCODE, DOC_NUM = AD.MNEMOCODE, DOC_DATE = AD.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ADI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ADI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ADI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ADI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ADI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ADI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ADI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ADI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ADI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_DEDUCTION_ITEM ADI(NOLOCK)
    INNER JOIN ACT_DEDUCTION AD(NOLOCK) ON AD.ID_ACT_DEDUCTION_GLOBAL = ADI.ID_ACT_DEDUCTION_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ADI.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = AD.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    AD.DOCUMENT_STATE = 'PROC' AND AD.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 20))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ADI.ID_ACT_DEDUCTION_GLOBAL, AD.MNEMOCODE, AD.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ПЕРЕОЦЕНКИ - СТАРЫЕ ЦЕНЫ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 13))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_REVALUATION',
    DOC_ID = AR.MNEMOCODE, DOC_NUM = AR.MNEMOCODE, DOC_DATE = AR.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ARI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ARI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ARI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ARI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ARI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ARI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ARI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ARI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ARI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_REVALUATION2_ITEM ARI(NOLOCK)
    INNER JOIN ACT_REVALUATION2 AR(NOLOCK) ON AR.ID_ACT_REVALUATION2_GLOBAL = ARI.ID_ACT_REVALUATION2_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ARI.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = AR.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE AR.DOCUMENT_STATE = 'PROC' AND AR.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 13))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ARI.ID_ACT_REVALUATION2_GLOBAL , AR.MNEMOCODE , AR.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- АКТ ПЕРЕОЦЕНКИ - НОВЫЕ ЦЕНЫ
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 13))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'ACT_REVALUATION',
    DOC_ID = AR.MNEMOCODE, DOC_NUM = AR.MNEMOCODE, DOC_DATE = AR.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * ARI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * ARI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * ARI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * ARI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * ARI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * ARI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ARI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(ARI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ARI.QUANTITY) as DECIMAL(18,4))
FROM 
    ACT_REVALUATION2_ITEM ARI(NOLOCK)
    INNER JOIN ACT_REVALUATION2 AR(NOLOCK) ON AR.ID_ACT_REVALUATION2_GLOBAL = ARI.ID_ACT_REVALUATION2_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_DOCUMENT_ITEM = ARI.ID_ACT_REVALUATION2_ITEM_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = AR.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    AR.DOCUMENT_STATE = 'PROC' AND AR.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 13))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    ARI.ID_ACT_REVALUATION2_GLOBAL , AR.MNEMOCODE , AR.DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- РАСХОДНАЯ НАКЛАДНАЯ
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)) AND ISNULL(@CASH_SESSION_MOVE,0)=0
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INVOICE_OUT',
    DOC_ID = I.MNEMOCODE, DOC_NUM = I.MNEMOCODE, DOC_DATE = I.DATE, DOC_INNUM = CAST(I.DOC_NUM AS VARCHAR(40)), DOC_IN_DAT = CAST(I.DOC_DATE AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * II.QUANTITY) AS DECIMAL(18,4)), 
	OPT_YNDS = CAST(SUM(L.PRICE_SUP * II.QUANTITY) AS DECIMAL(18,4)), 
	OPT_NDS = CAST(SUM(L.PVAT_SUP * II.QUANTITY) AS DECIMAL(18,4)),
	RET_NNDS = CAST(SUM((II.PRICE_SAL - II.PVAT_SAL) * II.QUANTITY) AS DECIMAL(18,4)), 
	RET_YNDS = CAST(SUM(II.PRICE_SAL * II.QUANTITY) AS DECIMAL(18,4)),
	RET_NDS = CAST(SUM(II.PVAT_SAL * II.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(II.SUM_DISCOUNT) AS DECIMAL(18,4)),
	RET_ADD = CAST(SUM(ABS((II.PRICE_SAL - II.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * II.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(II.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = CAST(SUM(CASE WHEN ISNULL(I.IS_CASH,0)=0 THEN II.PRICE_SAL * II.QUANTITY ELSE 0 END) AS DECIMAL(18,2)),
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = CON.NAME,
    CON_CODE = CON.CONTRACTOR_CODE,
    DATE_CON = CON.DATE_CONTRACTS,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(PERCENT_SERVICE * I.SUM_SAL/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * II.QUANTITY) as DECIMAL(18,4))
FROM 
    INVOICE_OUT_ITEM II(NOLOCK)
    INNER JOIN INVOICE_OUT I(NOLOCK) ON I.ID_INVOICE_OUT_GLOBAL = II.ID_INVOICE_OUT_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = II.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_TO
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.STATE = 'PROC' AND I.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))

GROUP BY 
    II.ID_INVOICE_OUT_GLOBAL , I.MNEMOCODE , I.DATE, I.DOC_NUM, I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON.NAME, CON.CONTRACTOR_CODE, CON.DATE_CONTRACTS, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- РАСХОДНАЯ НАКЛАДНАЯ (по движению)
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)) AND @CASH_SESSION_MOVE=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = 'INVOICE_OUT',
    DOC_ID = I.MNEMOCODE, 
    DOC_NUM = I.MNEMOCODE, 
    DOC_DATE = I.DATE, 
    DOC_INNUM = CAST(I.DOC_NUM AS VARCHAR(40)), 
    DOC_IN_DAT = CAST(I.DOC_DATE AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
    OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    OPT_NNDS = CAST(SUM(LM.SUM_SUP - LM.SVAT_SUP) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP) AS DECIMAL(18,4)),

    RET_NNDS = CAST(SUM(LM.SUM_ACC-LM.SVAT_ACC) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(LM.DISCOUNT_ACC) AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC-LM.SVAT_ACC) - (LM.SUM_SUP - LM.SVAT_SUP))) AS DECIMAL(18,4)),

    QUANTITY = CAST(SUM(LM.QUANTITY_SUB) AS DECIMAL(18,2)), 
    NULL,NULL,NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = CAST(SUM(CASE WHEN ISNULL(I.IS_CASH,0)=0 THEN LM.SUM_ACC ELSE 0 END) AS DECIMAL(18,2)),
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = CON.NAME,
    CON_CODE = CON.CONTRACTOR_CODE,
    DATE_CON = CON.DATE_CONTRACTS,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(PERCENT_SERVICE * I.SUM_SAL/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * LM.QUANTITY_SUB) as DECIMAL(18,4))
FROM 
    INVOICE_OUT_ITEM II(NOLOCK)
    INNER JOIN INVOICE_OUT I(NOLOCK) ON I.ID_INVOICE_OUT_GLOBAL = II.ID_INVOICE_OUT_GLOBAL
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_DOCUMENT = II.ID_INVOICE_OUT_GLOBAL AND LM.ID_DOCUMENT_ITEM = II.ID_INVOICE_OUT_ITEM_GLOBAL
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = L.ID_STORE
    INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_TO
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.STATE = 'PROC' AND I.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
    AND LM.QUANTITY_SUB>0

GROUP BY 
    II.ID_INVOICE_OUT_GLOBAL , I.MNEMOCODE , I.DATE, I.DOC_NUM, I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON.NAME, CON.CONTRACTOR_CODE, CON.DATE_CONTRACTS, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- СЧЕТ ФАКТУРА ДЛЯ РАСХОДНОЙ НАКЛАДНОЙ
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)) AND ISNULL(@CASH_SESSION_MOVE,0)=0
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'SCHET_FACTURA_INVOICE_OUT',
    DOC_ID = I.MNEMOCODE, DOC_NUM = I.MNEMOCODE, DOC_DATE = I.DATE, DOC_INNUM = CAST(I.DOC_NUM AS VARCHAR(40)), DOC_IN_DAT = CAST(I.DOC_DATE AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * II.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * II.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * II.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((II.PRICE_SAL - II.PVAT_SAL) * II.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(II.PRICE_SAL * II.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(II.PVAT_SAL * II.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(II.SUM_DISCOUNT) AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((II.PRICE_SAL - II.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * II.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(II.QUANTITY) AS DECIMAL(18,2)),    
    I.DOC_DATE, 
    I.DOC_NUM, 
    NULL, 
    NULL, 
    ISNULL(I.DATE_PAYMENT, I.[DATE]), 
    C.INN, 
    C.KPP, 
    (SELECT C.[NAME] FROM CONTRACTOR C INNER JOIN STORE S ON C.ID_CONTRACTOR = S.ID_CONTRACTOR WHERE S.ID_STORE = I.ID_STORE),
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = CON.NAME,
    CON_CODE = CON.CONTRACTOR_CODE,
    DATE_CON = CON.DATE_CONTRACTS,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(PERCENT_SERVICE * I.SUM_SAL/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * II.QUANTITY) as DECIMAL(18,4))
FROM 
    INVOICE_OUT_ITEM II(NOLOCK)
    INNER JOIN INVOICE_OUT I(NOLOCK) ON I.ID_INVOICE_OUT_GLOBAL = II.ID_INVOICE_OUT_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = II.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_TO
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.STATE = 'PROC' AND I.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
    AND C.MAKE_SCHET_FACTURA = 1

GROUP BY 
    II.ID_INVOICE_OUT_GLOBAL , I.MNEMOCODE , I.DATE, I.DOC_NUM, I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR, I.DOC_NUM, I.DOC_DATE, I.DATE_PAYMENT, C.KPP, I.ID_STORE,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON.NAME, CON.CONTRACTOR_CODE, CON.DATE_CONTRACTS, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
	CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.COST ELSE NULL END

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- СЧЕТ ФАКТУРА ДЛЯ РАСХОДНОЙ НАКЛАДНОЙ (по движению)
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)) AND @CASH_SESSION_MOVE=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
    PDATEEL = @PDATEEL, 
    OPER_CODE = 'SCHET_FACTURA_INVOICE_OUT',
    DOC_ID = I.MNEMOCODE, 
    DOC_NUM = I.MNEMOCODE, 
    DOC_DATE = I.DATE, 
    DOC_INNUM = CAST(I.DOC_NUM AS VARCHAR(40)), 
    DOC_IN_DAT = CAST(I.DOC_DATE AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
    OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    OPT_NNDS = CAST(SUM(LM.SUM_SUP-LM.SVAT_SUP) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP) AS DECIMAL(18,4)),

    RET_NNDS = CAST(SUM(LM.SUM_ACC-LM.SVAT_ACC) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC) AS DECIMAL(18,4)),
    RET_DISC = CAST(SUM(LM.DISCOUNT_ACC) AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC-LM.SVAT_ACC) - (LM.SUM_SUP-LM.SVAT_SUP))) AS DECIMAL(18,4)),

    QUANTITY = CAST(SUM(LM.QUANTITY_SUB) AS DECIMAL(18,2)),    
    I.DOC_DATE, 
    I.DOC_NUM, 
    NULL, 
    NULL, 
    ISNULL(I.DATE_PAYMENT, I.[DATE]), 
    C.INN, 
    C.KPP, 
    (SELECT C.[NAME] FROM CONTRACTOR C INNER JOIN STORE S ON C.ID_CONTRACTOR = S.ID_CONTRACTOR WHERE S.ID_STORE = I.ID_STORE),
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = CON.NAME,
    CON_CODE = CON.CONTRACTOR_CODE,
    DATE_CON = CON.DATE_CONTRACTS,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = CAST(SUM(PERCENT_SERVICE) AS DECIMAL(18,4)),
    SUM_SER = CAST(SUM(PERCENT_SERVICE * I.SUM_SAL/100) AS DECIMAL(18,4)),
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * LM.QUANTITY_SUB) as DECIMAL(18,4))
FROM 
    INVOICE_OUT_ITEM II(NOLOCK)
    INNER JOIN INVOICE_OUT I(NOLOCK) ON I.ID_INVOICE_OUT_GLOBAL = II.ID_INVOICE_OUT_GLOBAL
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_DOCUMENT = II.ID_INVOICE_OUT_GLOBAL 
                              AND LM.ID_DOCUMENT_ITEM = II.ID_INVOICE_OUT_ITEM_GLOBAL
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = L.ID_STORE
    INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_TO
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = I.ID_PAYER
    LEFT JOIN CONTRACTS CON ON CON.ID_CONTRACTS_GLOBAL = I.ID_CONTRACTS_GLOBAL
WHERE 
    I.STATE = 'PROC' AND I.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
    AND C.MAKE_SCHET_FACTURA = 1
    AND LM.QUANTITY_SUB>0

GROUP BY 
    II.ID_INVOICE_OUT_GLOBAL , I.MNEMOCODE , I.DATE, I.DOC_NUM, I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR, I.DOC_NUM, I.DOC_DATE, I.DATE_PAYMENT, C.KPP, I.ID_STORE,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CASE WHEN II.PVAT_SAL = 0 THEN 0 ELSE ROUND((II.PRICE_SAL * 100 / (II.PRICE_SAL-II.PVAT_SAL))-100,0) END ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON.NAME, CON.CONTRACTOR_CODE, CON.DATE_CONTRACTS, 
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- СЧЕТ-ФАКТУРА
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 22)) AND ISNULL(@CASH_SESSION_MOVE,0)=0
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'BILL',
    DOC_ID = B.DOC_NUM, DOC_NUM = B.DOC_NUM, DOC_DATE = B.DOC_DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,     
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(BI.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * BI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * BI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * BI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * BI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * BI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * BI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * BI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(BI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * BI.QUANTITY) as DECIMAL(18,4))
FROM 
    BILL_ITEM BI(NOLOCK)
    INNER JOIN BILL B(NOLOCK) ON B.ID_BILL_GLOBAL = BI.ID_BILL_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = BI.ID_LOT
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = B.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = B.ID_CONTRACTOR_PAY
WHERE 
    B.DOC_STATE = 'PROC' AND B.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 22))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))

GROUP BY 
    B.ID_BILL_GLOBAL , B.DOC_NUM, B.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(BI.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
	CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.COST ELSE NULL END

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- СЧЕТ-ФАКТУРА (по движению)
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 22)) AND @CASH_SESSION_MOVE=1
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'BILL',
    DOC_ID = B.DOC_NUM, 
    DOC_NUM = B.DOC_NUM, 
    DOC_DATE = B.DOC_DATE, 
    DOC_INNUM = CAST(NULL AS VARCHAR(40)), 
    DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
    STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
    CONTR_NM = C.NAME, 
    CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
    OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(BI.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM(LM.SUM_SUP-LM.SVAT_SUP) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM(LM.SUM_ACC-LM.SVAT_ACC) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC-LM.SVAT_ACC) - (LM.SUM_SUP-LM.SVAT_SUP))) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(BI.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = P.ID_CONTRACTOR,
    PAYER = P.NAME,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * BI.QUANTITY) as DECIMAL(18,4))
FROM 
    BILL_ITEM BI(NOLOCK)
    INNER JOIN BILL B(NOLOCK) ON B.ID_BILL_GLOBAL = BI.ID_BILL_GLOBAL
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_DOCUMENT = BI.ID_BILL_GLOBAL 
                              AND LM.ID_DOCUMENT_ITEM = BI.ID_BILL_ITEM_GLOBAL
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = L.ID_STORE
    INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR P ON P.ID_CONTRACTOR = B.ID_CONTRACTOR_PAY
WHERE 
    B.DOC_STATE = 'PROC' AND B.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 22))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))

GROUP BY 
    B.ID_BILL_GLOBAL , B.DOC_NUM, B.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN, P.NAME, P.ID_CONTRACTOR,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(BI.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- ИНВЕНТАРИЗАЦИЯ - ПРИХОД
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (23,24)))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INVENTORY_SURPLUS',
    DOC_ID = I.DOC_NUM, DOC_NUM = I.DOC_NUM, DOC_DATE = I.DOC_DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,    
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18, 4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18, 4)) ELSE NULL END,
    
    
    OPT_NNDS = SUM( CAST((L.PRICE_SUP_N2 - L.PVAT_SUP_N2) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ), 
    OPT_YNDS = SUM( CAST( L.PRICE_SUP_N2                  * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ), 
    OPT_NDS =  SUM( CAST( L.PVAT_SUP_N2                   * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ),

    RET_NNDS = SUM( CAST((L.PRICE_SAL_N2 - L.PVAT_SAL_N2) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ), 
    RET_YNDS = SUM( CAST( L.PRICE_SAL_N2                  * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ), 
    RET_NDS  = SUM( CAST( L.PVAT_SAL_N2                   * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ),
    
    RET_DISC = CAST(NULL AS DECIMAL(18, 2)),
    
    RET_ADD  = SUM( CAST(ABS((L.PRICE_SAL_N2 - L.PVAT_SAL_N2) - (L.PRICE_SUP_N2 - L.PVAT_SUP_N2)) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ),
    QUANTITY = SUM( CAST(                                                                           ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) AS DECIMAL(18, 2)) ), 
    
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB)) as DECIMAL(18,4))
FROM 
    LOT_MOVEMENT LM(NOLOCK)
    INNER JOIN INVENTORY_SVED I(NOLOCK) ON I.ID_INVENTORY_GLOBAL = LM.ID_DOCUMENT
    LEFT JOIN MV_LOT_1C L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    I.DOC_STATE = 'PROC' AND I.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO AND LM.QUANTITY_ADD > 0
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (23,24)))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    I.ID_INVENTORY_GLOBAL, I.DOC_NUM , I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- ИНВЕНТАРИЗАЦИЯ - РАСХОД
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (23,24)))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INVENTORY_MISSING',
    DOC_ID = I.DOC_NUM, DOC_NUM = I.DOC_NUM, DOC_DATE = I.DOC_DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END, 
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18, 4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18, 4)) ELSE NULL END,
    
    OPT_NNDS = SUM( CAST((L.PRICE_SUP_N2 - L.PVAT_SUP_N2) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ), 
    OPT_YNDS = SUM( CAST( L.PRICE_SUP_N2                  * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ), 
    OPT_NDS  = SUM( CAST( L.PVAT_SUP_N2                   * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ),

    RET_NNDS = SUM( CAST((L.PRICE_SAL_N2 - L.PVAT_SAL_N2) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ), 
    RET_YNDS = SUM( CAST( L.PRICE_SAL_N2                  * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ), 
    RET_NDS  = SUM( CAST( L.PVAT_SAL_N2                   * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ),

    RET_DISC = CAST(NULL AS DECIMAL(18, 2)),

    RET_ADD  = SUM( CAST(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ),
    QUANTITY = SUM( CAST(                                                               ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB) as DECIMAL(18, 2)) ), 
    
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * ABS(LM.QUANTITY_ADD - LM.QUANTITY_SUB)) as DECIMAL(18,4))
FROM 
    LOT_MOVEMENT LM(NOLOCK)
    INNER JOIN INVENTORY_SVED I(NOLOCK) ON I.ID_INVENTORY_GLOBAL = LM.ID_DOCUMENT
    LEFT JOIN MV_LOT_1C L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    I.DOC_STATE = 'PROC' AND I.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO AND LM.QUANTITY_SUB > 0
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (23,24)))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    I.ID_INVENTORY_GLOBAL, I.DOC_NUM , I.DOC_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -- -------------------------------------------------------------------------------------------
-- -- -- -- ВВОД ОСТАТКОВ
-- -- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 30))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, 
	PDATEEL = @PDATEEL, 
	OPER_CODE = 'IMPORT_REMAINS',
	DOC_ID = IR.MNEMOCODE,
	DOC_NUM = IR.MNEMOCODE,
	DOC_DATE = IR.DOCUMENT_DATE,
	DOC_INNUM = CAST(NULL AS VARCHAR(40)),
	DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    STORE_NM = CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    STORE_TO_I = CAST(NULL AS VARCHAR(40)), 
	STORE_TO_N = CAST(NULL AS VARCHAR(100)),
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), 
	CONTR_NM = C.NAME, 
	CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), 
	OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM(LM.SUM_SUP-LM.SVAT_SUP) AS DECIMAL(18,4)), 
    OPT_YNDS = CAST(SUM(LM.SUM_SUP) AS DECIMAL(18,4)), 
    OPT_NDS = CAST(SUM(LM.SVAT_SUP) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM(LM.SUM_ACC - LM.SVAT_ACC) AS DECIMAL(18,4)), 
    RET_YNDS = CAST(SUM(LM.SUM_ACC) AS DECIMAL(18,4)), 
    RET_NDS = CAST(SUM(LM.SVAT_ACC) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((LM.SUM_ACC-LM.SVAT_ACC) - (LM.SUM_SUP-LM.SVAT_SUP))) AS DECIMAL(18,4)),
	QUANTITY = CAST(SUM(LM.QUANTITY_ADD) AS DECIMAL(18,2)),	
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,		
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
	RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TSTORE_N = CAST(NULL AS VARCHAR(100)),
    TTSTORE_I = CAST(NULL AS VARCHAR(40)), 
    TTSTORE_N = CAST(NULL AS VARCHAR(100)),
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * LM.QUANTITY_ADD) as DECIMAL(18,4))	
FROM 
    LOT_MOVEMENT LM(NOLOCK)
	INNER JOIN IMPORT_REMAINS IR ON LM.ID_DOCUMENT = IR.ID_IMPORT_REMAINS_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE S(NOLOCK) ON S.ID_STORE = IR.ID_STORE
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL  AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    IR.DOCUMENT_STATE = 'PROC' AND IR.DOCUMENT_DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 30))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = S.ID_CONTRACTOR))
GROUP BY 
    IR.ID_IMPORT_REMAINS_GLOBAL, IR.MNEMOCODE, IR.DOCUMENT_DATE,
    CASE WHEN @STORE_GROUP = 1 THEN CAST(S.ID_STORE AS VARCHAR(40)) ELSE NULL END,
    CASE WHEN @STORE_GROUP = 1 THEN S.NAME ELSE NULL END,
    CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- ПЕРЕМЕЩЕНИЕ МЕЖДУ ПОДРАЗДЕЛЕНИЯМИ - ОТПРАВИТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 37))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING',
    DOC_ID = M.MNEMOCODE, DOC_NUM = M.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(M.GOODS_SENT AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING M(NOLOCK) ON M.ID_INTERFIRM_MOVING_GLOBAL = MI.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 37))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_GLOBAL, M.MNEMOCODE, M.DATE, M.ID_STORE_TO_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME, 
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT), 
	M.GOODS_SENT

-- -- -------------------------------------------------------------------------------------------
-- -- -- ПЕРЕМЕЩЕНИЕ МЕЖДУ ПОДРАЗДЕЛЕНИЯМИ - ПОЛУЧАТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 37))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING',
    DOC_ID = M.MNEMOCODE, DOC_NUM = M.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(M.GOODS_SENT AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING M(NOLOCK) ON M.ID_INTERFIRM_MOVING_GLOBAL = MI.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_TO
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 37))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_GLOBAL, M.MNEMOCODE, M.DATE, M.ID_STORE_FROM_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME,
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT), 
	M.GOODS_SENT

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ПРИЁМКИ ПО ПЕРЕМЕЩЁНИЮ - ОТПРАВИТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 38))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING_ACCEPTANCE_ACT',
    DOC_ID = IFM.MNEMOCODE, DOC_NUM = IFM.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_ACCEPTANCE_ACT_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING_ACCEPTANCE_ACT M(NOLOCK) ON M.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL = MI.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL
    INNER JOIN INTERFIRM_MOVING IFM(NOLOCK) ON IFM.ID_INTERFIRM_MOVING_GLOBAL = M.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 38))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL, IFM.MNEMOCODE, M.DATE, M.ID_STORE_TO_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME, 
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ПРИЁМКИ ПО ПЕРЕМЕЩЁНИЮ - ПОЛУЧАТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 38))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING_ACCEPTANCE_ACT',
    DOC_ID = IFM.MNEMOCODE, DOC_NUM = IFM.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_ACCEPTANCE_ACT_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING_ACCEPTANCE_ACT M(NOLOCK) ON M.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL = MI.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL
    INNER JOIN INTERFIRM_MOVING IFM(NOLOCK) ON IFM.ID_INTERFIRM_MOVING_GLOBAL = M.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_TO
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 38))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_ACCEPTANCE_ACT_GLOBAL, IFM.MNEMOCODE, M.DATE, M.ID_STORE_FROM_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME, 
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ОТКАЗА ПО ПЕРЕМЕЩЕНИЮ - ОТПРАВИТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 39))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING_REFUSAL_ACT',
    DOC_ID = IFM.MNEMOCODE, DOC_NUM = IFM.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 1,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_REFUSAL_ACT_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING_REFUSAL_ACT M(NOLOCK) ON M.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL = MI.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL
    INNER JOIN INTERFIRM_MOVING IFM(NOLOCK) ON IFM.ID_INTERFIRM_MOVING_GLOBAL = M.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 39))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL, IFM.MNEMOCODE, M.DATE, M.ID_STORE_TO_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME,
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1  THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- -- -------------------------------------------------------------------------------------------
-- -- -- АКТ ОТКАЗА ПО ПЕРЕМЕЩЕНИЮ - ПОЛУЧАТЕЛИ
-- -- -------------------------------------------------------------------------------------------
IF (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 39))
INSERT INTO #RESULT_TAB
SELECT
    PDATEBL = @PDATEBL, PDATEEL = @PDATEEL, OPER_CODE = 'INTERFIRM_MOVING_REFUSAL_ACT',
    DOC_ID = IFM.MNEMOCODE, DOC_NUM = IFM.MNEMOCODE, DOC_DATE = M.DATE, DOC_INNUM = CAST(NULL AS VARCHAR(40)), DOC_IN_DAT = CAST(NULL AS DATETIME),
    STORE_ID = CAST(MAIN_FR.ID_STORE AS VARCHAR(40)),
    STORE_NM = MAIN_FR.[NAME],
    STORE_TO_I = CAST(MAIN_TO.ID_STORE AS VARCHAR(40)),
    STORE_TO_N = MAIN_TO.[NAME],
    CONTRGR_ID = CASE WHEN @LAYOUT_GROUPS=1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CONTRGR_NM = CASE WHEN @LAYOUT_GROUPS=1  THEN CG.NAME ELSE NULL END,
    CONTR_ID = CAST(C.ID_CONTRACTOR AS VARCHAR(40)), CONTR_NM = C.NAME, CONTR_INN = C.INN,
    NUM_KASSA = CAST(NULL AS VARCHAR(40)), OPERT = 0,
    NDS_RATE = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    NDS_RATE_R = CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    OPT_NNDS = CAST(SUM((L.PRICE_SUP - L.PVAT_SUP) * MI.QUANTITY) AS DECIMAL(18,4)), OPT_YNDS = CAST(SUM(L.PRICE_SUP * MI.QUANTITY) AS DECIMAL(18,4)), OPT_NDS = CAST(SUM(L.PVAT_SUP * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_NNDS = CAST(SUM((L.PRICE_SAL - L.PVAT_SAL) * MI.QUANTITY) AS DECIMAL(18,4)), RET_YNDS = CAST(SUM(L.PRICE_SAL * MI.QUANTITY) AS DECIMAL(18,4)), RET_NDS = CAST(SUM(L.PVAT_SAL * MI.QUANTITY) AS DECIMAL(18,4)),
    RET_DISC = CAST(NULL AS DECIMAL(18,4)),
    RET_ADD = CAST(SUM(ABS((L.PRICE_SAL - L.PVAT_SAL) - (L.PRICE_SUP - L.PVAT_SUP)) * MI.QUANTITY) AS DECIMAL(18,4)),
    QUANTITY = CAST(SUM(MI.QUANTITY) AS DECIMAL(18,2)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    SUPPL_ID = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    SUPPL_NM = CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    ID_PAYER = NULL,
    PAYER = NULL,
    RET_YNDS_K = NULL,
    DATE_PAYMENT = NULL,
    INV_NUM  = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    INV_DATE = CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
    CON_NAME = NULL,
    CON_CODE = NULL,
    DATE_CON = NULL,
    I_O_NUM = NULL,
    I_O_DATE = NULL,
    GTD = NULL,
    COUNTRY = NULL,
    PER_SER = NULL,
    SUM_SER = NULL,
    OFF_BALANCE = CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT),
    GOODS_SENT = CAST(NULL AS BIGINT),
    TSTORE_I = CAST(TR_FR.ID_STORE AS VARCHAR(40)), 
    TSTORE_N = TR_FR.[NAME],
    TTSTORE_I = CAST(TR_TO.ID_STORE AS VARCHAR(40)), 
    TTSTORE_N = TR_TO.[NAME],
    GOODS_CODE = NULL,
    GOODS_NAME = NULL,
    GOODS_MEASURE = NULL,
    RET_TYPE1 = cast(NULL as money),
    RET_TYPE2 = cast(NULL as money),
    RET_TYPE4 = cast(NULL as money),
	COST = cast(SUM(ISNULL(l.COST, 0) * MI.QUANTITY) as DECIMAL(18,4))	
FROM 
    INTERFIRM_MOVING_REFUSAL_ACT_ITEM MI(NOLOCK)
    INNER JOIN INTERFIRM_MOVING_REFUSAL_ACT M(NOLOCK) ON M.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL = MI.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL
    INNER JOIN INTERFIRM_MOVING IFM(NOLOCK) ON IFM.ID_INTERFIRM_MOVING_GLOBAL = M.ID_INTERFIRM_MOVING_GLOBAL
    LEFT JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_TO
    LEFT JOIN STORE MAIN_FR(NOLOCK) ON MAIN_FR.ID_STORE = M.ID_STORE_FROM_MAIN
    LEFT JOIN STORE MAIN_TO(NOLOCK) ON MAIN_TO.ID_STORE = M.ID_STORE_TO_MAIN
    LEFT JOIN STORE TR_FR(NOLOCK) ON TR_FR.ID_STORE = M.ID_STORE_FROM_TRANSIT
    LEFT JOIN STORE TR_TO(NOLOCK) ON TR_TO.ID_STORE = M.ID_STORE_TO_TRANSIT
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR
    LEFT JOIN #DIST_CONTRACTOR_2_CONTRACTOR_GROUP CCG(NOLOCK) ON CCG.ID_CONTRACTOR = C.ID_CONTRACTOR AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR_GROUP CG(NOLOCK) ON CG.ID_CONTRACTOR_GROUP = CCG.ID_CONTRACTOR_GROUP AND CG.DATE_DELETED IS NULL AND @LAYOUT_GROUPS=1
    LEFT JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
    M.DOCUMENT_STATE = 'PROC' AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    AND (@ALL_STORE = 1 OR MAIN_FR.ID_STORE IN (SELECT TMP.ID_STORE FROM #STORE TMP))
    AND (@ALL_DOC = 1 OR EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 39))
    AND (@ALL_CONTRACTOR = 1 OR EXISTS(SELECT 1 FROM #CONTRACTOR tc WHERE tc.ID_CONTRACTOR = MAIN_FR.ID_CONTRACTOR))
GROUP BY 
    MI.ID_INTERFIRM_MOVING_REFUSAL_ACT_GLOBAL, IFM.MNEMOCODE, M.DATE, M.ID_STORE_FROM_MAIN, MAIN_FR.ID_CONTRACTOR,
    MAIN_FR.ID_STORE, MAIN_FR.NAME, MAIN_TO.ID_STORE, MAIN_TO.NAME,
    TR_FR.ID_STORE, TR_FR.NAME, TR_TO.ID_STORE, TR_TO.NAME, 
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CAST(CG.ID_CONTRACTOR_GROUP AS VARCHAR(40)) ELSE NULL END, 
    CASE WHEN @LAYOUT_GROUPS = 1 THEN CG.NAME ELSE NULL END,
    C.ID_CONTRACTOR, C.NAME, C.INN,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SUP AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_NDS = 1 THEN CAST(L.VAT_SAL AS DECIMAL(18,4)) ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.ID_CONTRACTOR ELSE NULL END,
    CASE WHEN @GROUP_SUPPLIER = 1 THEN SUP.NAME ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_NUM ELSE NULL END,
    CASE WHEN @INVOICE_NUMBER_GROUPS = 1 THEN L.INVOICE_DATE ELSE NULL END,
	CAST((CASE WHEN @OFF_BALANCE_GROUPS = 1 THEN ISNULL(L.OFF_BALANCE, 0) ELSE NULL END) AS BIGINT)

-- НАФИГА этот КОД? Eсли нужен, то нафига все расчеты выше где код аналогичен: RET_ADD = RET_NNDS - OPT_NNDS???
UPDATE #RESULT_TAB SET RET_ADD = RET_YNDS - OPT_YNDS


-- добавляем символы в номер закрытия смены , чтобы в 1с бухгалтерии учитывался расход по второму отделу
-- 2019
update #RESULT_TAB
set DOC_NUM = DOC_NUM + 'AR'
where OPER_CODE = 'CASH_SESSION' and STORE_NM like '%АптекаРу%'
update #RESULT_TAB
set DOC_ID = DOC_ID + 'AR'
where OPER_CODE = 'CASH_SESSION' and STORE_NM like '%АптекаРу%'
--2019

SELECT * FROM @STRUCTURE ORDER BY COL_ID
SELECT * FROM #RESULT_TAB order by PDATEBL, PDATEEL, oper_code, doc_id, doc_num, doc_date, doc_innum, doc_in_dat, store_nm, inv_num, inv_date




RETURN 0